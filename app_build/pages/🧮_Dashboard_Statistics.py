import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px

# Config trang -----------------------------------------
st.set_page_config(
    page_title="Data Analysis",
    page_icon="üßÆ",
    layout="wide"
)

df = st.session_state.df
df_non_tech = st.session_state.df_non_tech
df_title_job = st.session_state.df_title_job

if "df" or "df_non_tech" or "df_title_job" not in st.session_state:
    df = pd.read_csv('app_build/analysis_df_employee.csv')
    df_non_tech = pd.read_csv('app_build/analysis_df.csv')
    df_title_job = pd.read_csv('app_build/analysis_title_salary.csv')
    
# T·∫°o ti√™u ƒë·ªÅ -----------------------------------------
col1, col2, col3 = st.columns([1,6,1])

with col1:
    st.write("")
with col2:
    st.image('https://i.pinimg.com/564x/42/15/82/4215828147e9d7f55b41c77e0240b925.jpg')
    st.markdown("<h1 style='text-align: center; color: #B799FF;'>DASHBOARD STATISCAL DESCRIPTION</h1>", unsafe_allow_html=True)
    st.markdown("---", unsafe_allow_html=True)
with col3:
    st.write("")    

# Gi√° tr·ªã - C√°c bi·∫øn quan s√°t -------------------------
st.markdown("#### 1. Th√¥ng tin v·ªÅ d·ªØ li·ªáu:")
st.markdown("##### 1.1 D·ªØ li·ªáu kh·∫£o s√°t:")
# Ch∆∞a l·ªçc tech workers:
st.markdown("<h5 style='text-align: center; color:green'>ƒê·ªëi v·ªõi d·ªØ li·ªáu ch∆∞a ƒë∆∞·ª£c l·ªçc tech workers:</h5>", unsafe_allow_html=True)

# T·∫°o c√°c c·ªôt:
data_inf1, data_inf2, data_inf3, data_inf4 = st.columns(4)

data_inf1.metric(
    label="S·ªë l∆∞·ª£ng quan s√°t",
    value=df_non_tech.shape[0],
)
data_inf2.metric(
    label="S·ªë l∆∞·ª£ng thu·ªôc t√≠nh",
    value=df_non_tech.shape[1],
)
data_inf3.metric(
    label="S·ªê l∆∞·ª£ng thu·ªôc t√≠nh s·ªë",
    value=df_non_tech.select_dtypes(include=np.number).shape[1],
)
data_inf4.metric(
    label="S·ªë l∆∞·ª£ng thu·ªôc t√≠nh ph√¢n lo·∫°i",
    value=df_non_tech.shape[1] - df_non_tech.select_dtypes(include=np.number).shape[1],
)

# L·ªçc tech workers:
st.markdown("<h5 style='text-align: center; color:green'>ƒê·ªëi v·ªõi d·ªØ li·ªáu l·ªçc tech workers:</h5>", unsafe_allow_html=True)

# T·∫°o c√°c c·ªôt:
data_inf5, data_inf6, data_inf7, data_inf8 = st.columns(4)

data_inf5.metric(
    label="S·ªë l∆∞·ª£ng quan s√°t",
    value=df.shape[0],
)
data_inf6.metric(
    label="S·ªë l∆∞·ª£ng thu·ªôc t√≠nh",
    value=df.shape[1],
)
data_inf7.metric(
    label="S·ªê l∆∞·ª£ng thu·ªôc t√≠nh s·ªë",
    value=df.select_dtypes(include=np.number).shape[1],
)
data_inf8.metric(
    label="S·ªë l∆∞·ª£ng thu·ªôc t√≠nh ph√¢n lo·∫°i",
    value=df.shape[1] - df.select_dtypes(include=np.number).shape[1],
)

st.markdown("##### 1.2 D·ªØ li·ªáu l∆∞∆°ng theo vai tr√≤:")
data_inf9, data_inf10, data_inf11, data_inf12 = st.columns(4)

data_inf9.metric(
    label="S·ªë l∆∞·ª£ng quan s√°t",
    value=df_title_job.shape[0],
)
data_inf10.metric(
    label="S·ªë l∆∞·ª£ng thu·ªôc t√≠nh",
    value=df_title_job.shape[1],
)
data_inf11.metric(
    label="S·ªê l∆∞·ª£ng thu·ªôc t√≠nh s·ªë",
    value=df_title_job.select_dtypes(include=np.number).shape[1],
)
data_inf12.metric(
    label="S·ªë l∆∞·ª£ng thu·ªôc t√≠nh ph√¢n lo·∫°i",
    value=df_title_job.shape[1] - df_title_job.select_dtypes(include=np.number).shape[1],
)


st.markdown("---", unsafe_allow_html=True)

# L·ªçc DataFrame theo nƒÉm -------------------------------
st.markdown("##### B·ªô l·ªçc nƒÉm to√†n c·ª•c:", unsafe_allow_html=True)

year_filter = st.selectbox("L·ªçc theo nƒÉm:", df['Year'].unique())
df_year = df[df["Year"] == year_filter]

# T√≠nh nƒÉm tr∆∞·ªõc v·ªõi nƒÉm ƒë√£ ƒë∆∞·ª£c ch·ªçn:
if year_filter == 2018:
    pre_year = 2018
else:
    pre_year = year_filter - 1

df_pre_year = df[df["Year"] == pre_year]

# L·∫•y c√°c ƒë·ªô ƒëo th·ªëng k√™:
df_describe = df_year.describe().round(2).T
df_describe_pre = df_pre_year.describe().round(2).T

# Dashboard v·ªÅ l∆∞∆°ng c·ªßa th·∫ø gi·ªõi ---------------------
st.markdown("#### 2. Th√¥ng s·ªë th·ªëng k√™ v·ªÅ Salary ($):")
st.markdown("<h4 style='text-align: center; color:green'>T·ªïng h·ª£p t·ª´ 6 qu·ªëc gia</h4>", unsafe_allow_html=True)

# T·∫°o c√°c c·ªôt ƒë·ªÉ hi·ªÉn th·ªã th√¥ng s·ªë th·ªëng k√™ (P1):
stats_age_col1, stats_age_col2, stats_age_col3, stats_age_col4 = st.columns(4)
stats_age_col1.metric(
    label="Mean",
    value=df_describe.loc["Salary"].loc["mean"],
    delta=round(df_describe.loc["Salary"].loc["mean"] - df_describe_pre.loc["Salary"].loc["mean"], 2),
)
stats_age_col2.metric(
    label="Median",
    value=df_describe.loc["Salary"].loc["50%"],
    delta=round(df_describe.loc["Salary"].loc["50%"] - df_describe_pre.loc["Salary"].loc["50%"], 2),
)
stats_age_col3.metric(
    label="Std",
    value=df_describe.loc["Salary"].loc["std"],
    delta=round(df_describe.loc["Salary"].loc["std"] - df_describe_pre.loc["Salary"].loc["std"], 2),
)
stats_age_col4.metric(
    label="Count",
    value=df_describe.loc["Salary"].loc["count"].astype(int),
    delta=round(df_describe.loc["Salary"].loc["count"] - df_describe_pre.loc["Salary"].loc["count"], 2),
)

# T·∫°o c√°c c·ªôt ƒë·ªÉ hi·ªÉn th·ªã th√¥ng s·ªë th·ªëng k√™ (P2):
stats_age_col5, stats_age_col6, stats_age_col7 = st.columns(3)
stats_age_col5.metric(
    label="25%",
    value=df_describe.loc["Salary"].loc["25%"],
    delta=round(df_describe.loc["Salary"].loc["25%"] - df_describe_pre.loc["Salary"].loc["25%"], 2),
)
stats_age_col6.metric(
    label="Min",
    value=df_describe.loc["Salary"].loc["min"],
    delta=round(df_describe.loc["Salary"].loc["min"] - df_describe_pre.loc["Salary"].loc["min"], 2),
)
stats_age_col7.metric(
    label="Max",
    value=df_describe.loc["Salary"].loc["max"],
    delta=round(df_describe.loc["Salary"].loc["max"] - df_describe_pre.loc["Salary"].loc["max"], 2),
)

# T·∫°o box plox cho Salary th·∫ø gi·ªõi:
fig_boxplot_world = px.box(df_year, y="Salary")
st.plotly_chart(fig_boxplot_world,use_container_width=True,height=800)

# Dashboard v·ªÅ l∆∞∆°ng c·ªßa t·ª´ng qu·ªëc gia -----------------
st.markdown("<h4 style='text-align: center; color:green'>Ch·ªçn qu·ªëc gia c·ª• th·ªÉ</h4>", unsafe_allow_html=True)

# L·ªçc dataframe theo qu·ªëc gia:
country_filter = st.selectbox("L·ªçc theo qu·ªëc gia:", df['Country'].unique())

df_country = df_year[df_year["Country"] == country_filter]
df_describe_country = df_country.describe().T
df_pre_describe_country = df_pre_year[df_pre_year["Country"] == country_filter].describe().T

# T·∫°o c√°c c·ªôt ƒë·ªÉ hi·ªÉn th·ªã th√¥ng s·ªë th·ªëng k√™ (P1):
country_col1, country_col2, country_col3, country_col4 = st.columns(4)
country_col1.metric(
    label="Mean",
    value=round(df_country["Salary"].mean(), 2),
    delta=round(df_describe_country.loc["Salary"].loc["mean"] - df_pre_describe_country.loc["Salary"].loc["mean"], 2),
)
country_col2.metric(
    label="Median",
    value=round(df_country["Salary"].median(), 2),
    delta=round(df_describe_country.loc["Salary"].loc["50%"] - df_pre_describe_country.loc["Salary"].loc["50%"], 2),
)
country_col3.metric(
    label="Std",
    value=round(df_country["Salary"].std(), 2),
    delta=round(df_describe_country.loc["Salary"].loc["std"] - df_pre_describe_country.loc["Salary"].loc["std"], 2),
)
country_col4.metric(
    label="Count",
    value=df_country["Salary"].count().astype(int),
    delta=round(df_describe_country.loc["Salary"].loc["count"] - df_pre_describe_country.loc["Salary"].loc["count"], 2),
)

# T·∫°o c√°c c·ªôt ƒë·ªÉ hi·ªÉn th·ªã th√¥ng s·ªë th·ªëng k√™ (P2):
country_col5, country_col6, country_col7 = st.columns(3)
country_col5.metric(
    label="25%",
    value=df_country["Salary"].quantile(0.25),
    delta=round(df_describe_country.loc["Salary"].loc["25%"] - df_pre_describe_country.loc["Salary"].loc["25%"], 2),
)
country_col6.metric(
    label="Min",
    value=df_country["Salary"].min(),
    delta=round(df_describe_country.loc["Salary"].loc["min"] - df_pre_describe_country.loc["Salary"].loc["min"], 2),
)
country_col7.metric(
    label="Max",
    value=df_country["Salary"].max(),
    delta=round(df_describe_country.loc["Salary"].loc["max"] - df_pre_describe_country.loc["Salary"].loc["max"], 2),
)

# T·∫°o box plox cho Salary theo qu·ªëc gia:
fig_boxplot_country = px.box(df_country, y="Salary", x="Country")
st.plotly_chart(fig_boxplot_country,use_container_width=True,height=800)

st.markdown("---", unsafe_allow_html=True)

# Dashboard v·ªÅ bi·ªÉu ƒë·ªì th·ªëng k√™ -----------------
st.markdown("#### 3. C√°c bi·ªÉu ƒë·ªì m√¥ t·∫£:")

# L·∫•y s·ªë l∆∞·ª£ng ng∆∞·ªùi ph√¢n ph·ªëi theo tu·ªïi:
df_age = df.groupby(['Age', 'Year']).size().reset_index(name='Count')
df_age = df_age[df_age["Year"] == year_filter]

# T·∫°o dashboard, c·ªôt v·ªÅ bi·ªÉu ƒë·ªì th·ªëng k√™ (P1):
fig_col1, fig_col2 = st.columns([5, 5])
with fig_col1:
    st.markdown("### Tech workers")
    fig_tech_worker = px.histogram(df,
                    x="Year", color="Country", barmode="group", histfunc="count",
                    category_orders={"Country": ["Chinaüá®üá≥", "IndiaüáÆüá≥", "Viet Nam", "U.S.üá∫üá∏"]})
    fig_tech_worker.update_xaxes(type='category')
    fig_tech_worker.update_yaxes(title="Number of tech workers")

    st.plotly_chart(fig_tech_worker,use_container_width=True,height=800)
with fig_col2:
    st.markdown("### Age range percentage")
    fig_age_range = px.pie(df_age, values='Count', names='Age')
    st.plotly_chart(fig_age_range,use_container_width=True,height=800)


# T·∫°o dashboard, c·ªôt v·ªÅ bi·ªÉu ƒë·ªì th·ªëng k√™ (P2):
fig_col3, fig_col4 = st.columns([5, 5])
with fig_col3:
    st.markdown("### Salary histogram")
    fig_salary_hist = px.histogram(df_year, x="Age", y='Salary', hover_data=df.columns)
    st.plotly_chart(fig_salary_hist,use_container_width=True,height=800)
with fig_col4:
    st.markdown("### Salary boxplot")
    fig_salary_boxplot = px.box(df_year, x="Age", y='Salary', hover_data=df.columns)
    st.plotly_chart(fig_salary_boxplot,use_container_width=True,height=800)

# Ti·∫øn h√†nh nh·∫≠n x√©t -----------------
st.markdown("#### 4. C√°c nh·∫≠n x√©t h·ªØu √≠ch t·ª´ bi·ªÉu ƒë·ªì/th√¥ng s·ªë th·ªëng k√™:")

st.markdown("##### 4.1 B·ªô d·ªØ li·ªáu ch√≠nh:")
tab1, tab2, tab3, tab4 = st.tabs(["Box Plot", "Tech Workers", "Age Range", "Salary Histogram"])
with tab1:
    st.markdown("##### 1. Box Plot:")

    col_tab1_1, col_tab1_2 = st.columns([4, 6])
    year_filter_tab = col_tab1_1.selectbox("Ch·ªçn nƒÉm th·ªÉ hi·ªán box plot", df['Year'].unique())
    df_year_tab = df[df["Year"] == year_filter_tab]

    df_describe_tab = df_year_tab.describe().round(2).T
    fig_boxplot_world_tab = px.box(df_year_tab, y="Salary")

    with col_tab1_1:
        st.caption(f"1.1. Ph√¢n b·ªï l∆∞∆°ng DS/ML nƒÉm {year_filter_tab}")
        st.plotly_chart(fig_boxplot_world_tab,use_container_width=True,height=800)
    with col_tab1_2:
        year_filter_tab5 = col_tab1_2.selectbox("Ch·ªçn nƒÉm kh·∫£o s√°t ph√¢n b·ªï l∆∞∆°ng theo tu·ªïi", df['Year'].unique())
        st.caption(f"5.1. Ph√¢n b·ªï l∆∞∆°ng theo ƒë·ªô tu·ªïi c·ªßa tech workers trong nƒÉm {year_filter_tab5} ")

        df_year_tab5 = df[df["Year"] == year_filter_tab5]
        df_salary_tab5 = px.box(df_year_tab5, x="Age", y='Salary', hover_data=df.columns)

        st.plotly_chart(df_salary_tab5,use_container_width=True,height=800)

with tab2:
    st.markdown("##### 2. Tech Workers:")

    col_tab2_1, col_tab2_2 = st.columns([4, 6])

    with col_tab2_1:
        st.caption(f"2.1. S·ªë l∆∞·ª£ng tech workers (tham gia kh·∫£o s√°t) theo t·ª´ng qu·ªëc gia")
        st.plotly_chart(fig_tech_worker,use_container_width=True,height=800)
    with col_tab2_2:
        st.info("**Nh·∫≠n x√©t chung**: Qua th·ªùi gian t·ª´ 2019 ƒë·∫øn 2022, c√≥ th·ªÉ nh·∫≠n th·∫•y Vi·ªát Nam v√† sau ƒë√≥ l√† Trung Qu·ªëc l√† hai qu·ªëc gia c√≥ s·ªë l∆∞·ª£ng ng∆∞·ªùi tham gia kh·∫£o s√°t √≠t nh·∫•t. ƒê√°ng ch√∫ √Ω, s·ª± tham gia c·ªßa ng∆∞·ªùi d√¢n trong m·ªói qu·ªëc gia kh√¥ng ph·∫£n √°nh t·ª∑ l·ªá d√¢n s·ªë c·ªßa qu·ªëc gia ƒë√≥. Ch·∫≥ng h·∫°n, v√†o nƒÉm 2021, d√¢n s·ªë Trung Qu·ªëc l√† kho·∫£ng 1,412 t·ª∑, d√¢n s·ªë ·∫§n ƒê·ªô l√† 1,393 t·ª∑, d√¢n s·ªë Vi·ªát Nam l√† 97,5 tri·ªáu v√† d√¢n s·ªë Hoa K·ª≥ l√† kho·∫£ng 331,9 tri·ªáu. ƒêi·ªÅu n√†y c√≥ nghƒ©a l√† trong cu·ªôc kh·∫£o s√°t nƒÉm 2021, c√°c nh√¢n vi√™n c√¥ng ngh·ªá chi·∫øm t·ª∑ l·ªá (5,76e-7)% trong d√¢n s·ªë Trung Qu·ªëc, (6,31e-6)% trong d√¢n s·ªë ·∫§n ƒê·ªô, (2.1e-6)% trong d√¢n s·ªë Vi·ªát Nam v√† (8,79e-6)% trong d√¢n s·ªë M·ªπ.")

with tab3:
    st.markdown("##### 3. Age Range:")
    col_tab3_1, col_tab3_2 = st.columns([4, 6])
    

    with col_tab3_1:
        year_filter_tab3 = col_tab3_1.selectbox("Ch·ªçn nƒÉm kh·∫£o s√°t tu·ªïi", df['Year'].unique())
        st.caption(f"3.1. Ph√¢n b·ªï theo ƒë·ªô tu·ªïi c·ªßa tech workers trong nƒÉm {year_filter_tab3}")
        
        df_age_t3 = df.groupby(['Age', 'Year']).size().reset_index(name='Count')
        df_age_tab3 = df_age_t3[df_age_t3["Year"] == year_filter_tab3]
        df_age_tab3 = px.pie(df_age_tab3, values='Count', names='Age')

        st.plotly_chart(df_age_tab3,use_container_width=True,height=800)
    with col_tab3_2:
        st.info(f"**Nh·∫≠n x√©t chung**: ƒê·ªô tu·ªïi c·ªßa tech workers tham gia kh·∫£o s√°t t·∫≠p trung ch·ªß y·∫øu trong kho·∫£ng t·ª´ 25 ƒë·∫øn 34 tu·ªïi. T·ª´ ƒë√≥ gi·∫£m d·∫ßn v·ªÅ c√°c ƒë·ªô tu·ªïi c√≤n l·∫°i. ƒêi·ªÅu n√†y c√≥ th·ªÉ gi·∫£i th√≠ch b·ªüi ƒë·ªô tu·ªïi n√†y l√† ƒë·ªô tu·ªïi m√† ng∆∞·ªùi ta ƒë√£ t·ªët nghi·ªáp ƒë·∫°i h·ªçc v√† b·∫Øt ƒë·∫ßu ƒëi l√†m. ƒê·ªìng th·ªùi, ƒë·ªô tu·ªïi n√†y c≈©ng l√† ƒë·ªô tu·ªïi m√† ng∆∞·ªùi ta c√≥ th·ªÉ c√≥ gia ƒë√¨nh v√† c√≥ con. V√¨ v·∫≠y, h·ªç s·∫Ω c√≥ nhu c·∫ßu t√¨m ki·∫øm m·ªôt c√¥ng vi·ªác ·ªïn ƒë·ªãnh v√† l∆∞∆°ng cao d·ª±a tr√™n kinh nghi·ªám c·ªßa m√¨nh h∆°n ƒë·ªÉ c√≥ th·ªÉ nu√¥i s·ªëng cho gia ƒë√¨nh c·ªßa m√¨nh")

with tab4:
    st.markdown("##### 4. Salary Histogram:")
    col_tab4_1, col_tab4_2 = st.columns([4, 6])

    with col_tab4_1:
        year_filter_tab4 = col_tab4_1.selectbox("Ch·ªçn nƒÉm kh·∫£o s√°t l∆∞∆°ng", df['Year'].unique())
        st.caption(f"4.1. Ph√¢n b·ªï l∆∞∆°ng theo ƒë·ªô tu·ªïi c·ªßa tech workers trong nƒÉm {year_filter_tab4} ")

        df_year_tab4 = df[df["Year"] == year_filter_tab4]
        df_salary_tab4 = px.histogram(df_year_tab4, x="Age", y='Salary', hover_data=df.columns)

        st.plotly_chart(df_salary_tab4,use_container_width=True,height=800)
    with col_tab4_2:
        st.info(f"**Nh·∫≠n x√©t chung**: Qua t·ª´ng nƒÉm, ta c√≥ th·ªÉ th·∫•y r·∫±ng l∆∞∆°ng c·ªßa tech workers tƒÉng d·∫ßn theo ƒë·ªô tu·ªïi, c·ª• th·ªÉ l√† t·ª´ h∆°n 30 ƒë·∫øn 50 tu·ªïi r·ªìi b·∫Øt ƒë·∫ßu h·∫° xu·ªëng d·∫ßn, ƒëi·ªÅu n√†y c√≥ th·ªÉ ƒë∆∞·ª£c ph·ªèng ƒëo√°n d·ª±a v√†o ƒë·ªô tu·ªïi c√†ng cao th√¨ s·ªë kinh nghi·ªám h·ªç t√≠ch g√≥p ƒë∆∞·ª£c c√†ng nhi·ªÅu v√† l√™n ch·ª©c v·ª• n·∫øu ƒë√£ l√†m l√¢u nƒÉm, nh∆∞ng sau ƒë·ªô tu·ªïi 50 th√¨ h·ªç b·∫Øt ƒë·∫ßu v·ªÅ h∆∞u cho n√™n l∆∞∆°ng gi·∫£m m·∫°nh. ·ªû ƒë·ªô tu·ªïi 22 - 29, l∆∞∆°ng v·∫´n c√≤n ch∆∞a cao v√¨ c√≥ th·ªÉ h·ªç m·ªõi t√¨m ƒë∆∞·ª£c vi·ªác l√†m hay trong k·ª≥ th·ª±c t·∫≠p... ")

st.markdown("##### 4.2 B·ªô d·ªØ li·ªáu ph·ª•:")

tab5, tab6 = st.tabs(["Th√¥ng s·ªë Salary (USD)", "T·ª∑ l·ªá l√†m remote (%)"])

with tab5:
    col_tab5_1, col_tab5_2 = st.columns(2)

    with col_tab5_1:
        df_salary_title_tab = df_title_job["salary_in_usd"].describe().T
        st.dataframe(df_salary_title_tab)
    with col_tab5_2:
        fig_salary_title_tab = px.box(df_title_job, y="salary_in_usd")
        st.plotly_chart(fig_salary_title_tab,use_container_width=True, width=900)
with tab6:
    col_tab6_1, col_tab6_2 = st.columns(2)

    with col_tab6_1:
        df_remote_title_tab = df_title_job["remote_ratio"].describe().T
        st.dataframe(df_remote_title_tab)

    with col_tab6_2:
        fig_remote_title_tab = px.box(df_title_job, y="remote_ratio")
        st.plotly_chart(fig_remote_title_tab,use_container_width=True, width=900)