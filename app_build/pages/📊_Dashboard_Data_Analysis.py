import streamlit as st
import pandas as pd
import numpy as np

from plotly.subplots import make_subplots
import plotly.graph_objects as go
import plotly.express as px

# Config trang -----------------------------------------
st.set_page_config(
    page_title="Dashboard Data Analysis",
    page_icon="üìä",
    layout="wide"
)

df = st.session_state.df
df_non_tech = st.session_state.df_non_tech

# T·∫°o ti√™u ƒë·ªÅ -----------------------------------------
col1, col2, col3 = st.columns([1,6,1])

with col1:
    st.write("")
with col2:
    st.image('https://i.pinimg.com/564x/94/cd/95/94cd95a169e5aba95b51c8dad432b997.jpg')
    st.markdown("<h1 style='text-align: center; color: #B799FF;'>DASHBOARD DATA ANALYSIS</h1>", unsafe_allow_html=True)
    st.markdown("---", unsafe_allow_html=True)
with col3:
    st.write("")   

# Plot th·ª© nh·∫•t -----------------------------------------
st.markdown("#### 1. C√°c n·ªÅn t·∫£ng h·ªçc t·∫≠p n√†o ƒë∆∞·ª£c c√°c k·ªπ s∆∞ v√† c√°c h·ªçc sinh tin d√πng nh·∫•t?")
df_student = df_non_tech[df_non_tech['Title'] == 'Student']
df_employee = df.copy()


# Get every platfroms from everyone choice
learning_platfroms_employee = df_employee[['Learning Platforms']].apply(lambda x: 
                                                                        list( map(lambda y:y.strip(),str(x[0]).split('--'))),axis=1)\
                                                                .explode().value_counts().to_frame(name='Vote').drop(index = 'nan')
learning_platfroms = df_student[['Learning Platforms']].apply(lambda x: 
                                                      list( map(lambda y:y.strip(),str(x[0]).split('--'))),axis=1)\
                                                        .explode().value_counts().to_frame(name='Vote').drop(index = 'nan')

# --- drop un useful records
for i in learning_platfroms.index:
    if i.isnumeric():
        learning_platfroms.drop(index = i,inplace=True)
learning_platfroms.drop(index = '-1',inplace=True)

for i in learning_platfroms_employee.index:
    if i.isnumeric():
        learning_platfroms_employee.drop(index = i,inplace=True)
        
learning_platfroms_employee.drop(index = '-1',inplace=True)


# -----

learning_platfroms.reset_index(inplace=True)
learning_platfroms.rename(columns={'index':'Platfrom'},inplace=True)

learning_platfroms_employee.reset_index(inplace=True)
learning_platfroms_employee.rename(columns={'index':'Platfrom'},inplace=True)

# get top 10
learning_platfroms=learning_platfroms.sort_values('Vote',ascending=False).head(10)
learning_platfroms_employee=learning_platfroms_employee.sort_values('Vote',ascending=False).head(10)

# Plot 
fig1 = make_subplots(rows=1,cols=2,
                    specs=[[{"type": "pie"}, {"type": "pie"}]],
                    subplot_titles=("Student", "Employee"))
fig1.add_trace(go.Pie(
     name='',
     values=learning_platfroms['Vote'],
     labels=learning_platfroms['Platfrom'],hole=0.3),  
     row=1, col=1)

fig1.add_trace(go.Pie(
     name='',
     values=learning_platfroms_employee['Vote'],
     labels=learning_platfroms_employee['Platfrom'],hole=0.3),
    row=1, col=2)

fig1.update_layout(height=600, width=1600, title_text="Learning Platforms")
st.plotly_chart(fig1,use_container_width=True,height=800)


st.info("""**Nh·∫≠n x√©t:** V·ªõi 10 n·ªÅn t·∫£ng kh·∫£o s√°t ƒë∆∞·ª£c ch·ªçn nhi·ªÅu nh·∫•t b·ªüi 2 ph√≠a ƒë·ªÅu ƒë∆∞·ª£c gi·ªØa nguy√™n m√† kh√¥ng c√≥ s·ª± xu·∫•t hi·ªán c·ªßa m·ªôt n·ªÅn t·∫£ng n√†o kh√°c ƒë·ªëi v·ªõi b√™n c√≤n l·∫°i, d·∫´n ƒë·∫ßu b·ªüi Coursera v√† Udemy ƒë√£ chi·∫øm m·ªôt ph·∫ßn ph·ªï bi·∫øn r·∫•t l·ªõn ƒë·ªëi v·ªõi nh·ªØng ng∆∞·ªùi ƒë∆∞·ª£c kh·∫£o s√°t khi c√≥ ƒë·∫øn kho·∫£ng 1/3 s·ªë ng∆∞·ªùi l·ª±a ch·ªçn n·ªÅn t·∫£ng n√†y, cho th·∫•y r·∫±ng kh√¥ng c√≥ s·ª± kh√°c bi·ªát l·ªõn gi·ªØa nh·ªØng ng∆∞·ªùi ƒëi h·ªçc v·ªÅ ƒë√£ ƒëi l√†m ·ªü kho·∫£ng m·ª•c n√†y. 
Ngo√†i ra, ta c√≤n th·∫•y vi·ªác h·ªçc ƒë·∫°i h·ªçc kh√¥ng ph·∫£i l√† l·ª±a ch·ªçn ∆∞u ti√™n h√†ng ƒë·∫ßu cho c√°c k·ªπ s∆∞/h·ªçc sinh, thay v√†o ƒë√≥ l√† vi·ªác h·ªçc tr·ª±c tuy·∫øn (c√≥ l·∫Ω l√† do th·ªùi gian h·ªçc t·∫≠p linh ho·∫°t n√™n ƒë∆∞·ª£c nhi·ªÅu ng∆∞·ªùi l·ª±a ch·ªçn).
""", icon="‚ÑπÔ∏è")

st.info("""**Gi·∫£i ph√°p thu h√∫t ng∆∞·ªùi h·ªçc cho nh·ªØng n·ªÅn t·∫£ng h·ªçc t·∫≠p kh√°c**: Qua vi·ªác ph√¢n t√≠ch ra n·ªÅn t·∫£ng h·ªçc t·∫≠p n√†o ƒë∆∞·ª£c nhi·ªÅu h·ªçc sinh/k·ªπ s∆∞ tin d√πng th√¨ nh√≥m nh·∫≠n th·∫•y Coursera c≈©ng nh∆∞ Udemy c√≥ nhi·ªÅu l·ª±a ch·ªçn nh·∫•t. C√°c gi·∫£i ph√°p n√†y ƒë∆∞·ª£c l·ª±a ch·ªçn nhi·ªÅu b·ªüi v√¨: \n
- C√≥ nhi·ªÅu kh√≥a h·ªçc v·ªÅ nhi·ªÅu lƒ©nh v·ª±c kh√°c nhau, t·ª´ l·∫≠p tr√¨nh, thi·∫øt k·∫ø, kinh doanh, marketing, t√†i ch√≠nh, v.v... Dƒ© nhi√™n, vi·ªác h·ªçc ch·ªâ m·ªói Data Science/Machine Learning thu·∫ßn th√¥i l√† ch∆∞a ƒë·ªß, c·∫ßn ph·∫£i k·∫øt h·ª£p nhi·ªÅu ki·∫øn th·ª©c t·ª´ c√°c chuy√™n ng√†nh kh√°c v√†o ƒë·ªÉ l·∫•y ki·∫øn th·ª©c cho vi·ªác ph√¢n t√≠ch d·ªØ li·ªáu t·ª´ ch√∫ng.
- Chi ph√≠ m·ªói kh√≥a h·ªçc r·∫ª ho·∫∑c ƒë·ªÅu mi·ªÖn ph√≠. ƒê·ªëi v·ªõi Udemy, h·ªç c√≥ nh·ªØng ƒë·ª£t gi·∫£m gi√° s√¢u cho nh·ªØng kh√≥a h·ªçc c·ªßa m√¨nh, ng∆∞·ªùi d√πng ch·ªâ c·∫ßn b·ªè m·ªôt kho·∫£n ph√≠ nh·ªè ƒë·ªÉ s·ªü h·ªØu ƒë∆∞·ª£c ch√∫ng. ƒê·ªëi v·ªõi Coursera, c√°c kh√≥a h·ªçc c√≥ h·ªó tr·ª£ t√†i ch√≠nh (mi·ªÖn ph√≠ ho·∫∑c n·ª≠a gi√°,...) hay h·ªçc d·ª± th√≠nh (kh√¥ng l√†m b√†i t·∫≠p, kh√¥ng c√≥ ch·ª©ng ch·ªâ khi h·ªçc xong). Nh·ªØng ƒëi·ªÅu n√†y gi√∫p cho ng∆∞·ªùi h·ªçc ti·∫øp c·∫≠n nhi·ªÅu h∆°n v·ªõi n·ªÅn t·∫£ng n√†y.
- C√°c kh√≥a h·ªçc ƒë∆∞·ª£c t·ªï ch·ª©c b√†i b·∫£n v√† kh√° chuy√™n s√¢u (ƒëa s·ªë l√† c√°c gi·∫£ng vi√™n ƒë·∫°i h·ªçc ƒë·∫øn t·ª´ c√°c tr∆∞·ªùng ƒë·∫°i h·ªçc l·ªõn tr√™n th·∫ø gi·ªõi). \n

Nh∆∞ v·∫≠y, ƒë·ªÉ m·ªôt n·ªÅn t·∫£ng h·ªçc t·∫≠p online thu h√∫t ƒë∆∞·ª£c nhi·ªÅu ng∆∞·ªùi h·ªçc, ta c·∫ßn ph·∫£i c√≥ nh·ªØng y·∫øu t·ªë nh∆∞ tr√™n. V√≠ d·ª•, m·ªôt n·ªÅn t·∫£ng h·ªçc t·∫≠p m·ªõi m·ªü th√¨ c√≥ th·ªÉ √°p d·ª•ng vi·ªác gi·∫£m gi√° theo tu·∫ßn/th√°ng/qu√Ω... ƒë·ªÉ thu h√∫t ƒë∆∞·ª£c nhi·ªÅu ng∆∞·ªùi h·ªçc. Ngo√†i ra, cung c·∫•p nhi·ªÅu ki·∫øn th·ª©c li√™n quan ƒë·∫øn m·ªôt b√†i h·ªçc (bao g·ªìm c√°c chuy√™n ng√†nh/kh√≥a h·ªçc li√™n quan) c√≥ th·ªÉ gi√∫p ng∆∞·ªùi h·ªçc hi·ªÉu s√¢u nh·∫•t c√≥ th·ªÉ. 
""", icon="‚ùì")

#------------------------------------
# Ph√¢n t√≠ch n·ªÅn t·∫£ng h·ªçc t·∫≠p qu·ªëc gia Vi·ªát Nam: 
# Filter Viet Nam
df_student_vi = df_student[df_student['Country'] == 'Viet Nam']
df_employee_vi = df_employee[df_employee['Country'] == 'Viet Nam']

learning_platfroms_employee_vi = df_employee_vi[['Learning Platforms']].apply(lambda x: 
                                                                        list( map(lambda y:y.strip(),str(x[0]).split('--'))),axis=1)\
                                                                .explode().value_counts().to_frame(name='Vote').drop(index = 'nan')
learning_platfroms_vi = df_student_vi[['Learning Platforms']].apply(lambda x: 
                                                      list( map(lambda y:y.strip(),str(x[0]).split('--'))),axis=1)\
                                                        .explode().value_counts().to_frame(name='Vote').drop(index = 'nan')

for i in learning_platfroms_vi.index:
    if i.isnumeric():
        learning_platfroms_vi.drop(index = i,inplace=True)
learning_platfroms_vi.drop(index = '-1',inplace=True)

for i in learning_platfroms_employee_vi.index:
    if i.isnumeric():
        learning_platfroms_employee_vi.drop(index = i,inplace=True)
        
learning_platfroms_employee_vi.drop(index = '-1',inplace=True)

learning_platfroms_vi.reset_index(inplace=True)
learning_platfroms_vi.rename(columns={'index':'Platfrom'},inplace=True)

learning_platfroms_employee_vi.reset_index(inplace=True)
learning_platfroms_employee_vi.rename(columns={'index':'Platfrom'},inplace=True)

# get top 10
learning_platfroms_vi=learning_platfroms_vi.sort_values('Vote',ascending=False).head(10)
learning_platfroms_employee_vi=learning_platfroms_employee_vi.sort_values('Vote',ascending=False).head(10)

# Plot 
fig1vi = make_subplots(rows=1,cols=2,
                    specs=[[{"type": "pie"}, {"type": "pie"}]],
                    subplot_titles=("Student", "Employee"))
fig1vi.add_trace(go.Pie(
     name='',
     values=learning_platfroms_vi['Vote'],
     labels=learning_platfroms_vi['Platfrom'],hole=0.3),  
     row=1, col=1)

fig1vi.add_trace(go.Pie(
     name='',
     values=learning_platfroms_employee_vi['Vote'],
     labels=learning_platfroms_employee_vi['Platfrom'],hole=0.3),
    row=1, col=2)

fig1vi.update_layout(height=600, width=1600, title_text="Learning Platforms In VietNam")
st.plotly_chart(fig1vi,use_container_width=True,height=800)

st.info("""**Nh·∫≠n x√©t**: Qua 10 n·ªÅn t·∫£ng h·ªçc t·∫≠p ƒë∆∞·ª£c kh·∫£o s√°t, ta th·∫•y c√°c k·ªπ s∆∞/sinh vi√™n Vi·ªát Nam h·ªçc qua c√°c n·ªÅn t·∫£ng online nh∆∞ Coursera (ƒë·ªÅu chi·∫øm 27-28%), Kaggle Learn Courses l√† nhi·ªÅu nh·∫•t. Trong khi ƒë√≥, vi·ªác h·ªçc ƒë·∫°i h·ªçc l·∫°i c√≥ s·ª± l·ª±a ch·ªçn √≠t h∆°n nhi·ªÅu. C√≥ l·∫Ω v√¨ chi ph√≠ h·ªçc qu√° cao, b·ªè ra nhi·ªÅu th·ªùi gian v√† c√¥ng s·ª©c h∆°n so v·ªõi c√°c n·ªÅn t·∫£ng online n√™n m·ªõi √≠t l·ª±a ch·ªçn. ƒêi·ªÅu n√†y c√≥ th·ªÉ t·∫°o ra m·ªôt ƒë·ªôi ng≈© k·ªπ s∆∞ √≠t ch·∫•t l∆∞·ª£ng h∆°n so v·ªõi c√°c n∆∞·ªõc kh√°c (t·ª∑ l·ªá h·ªçc ƒë·∫°i h·ªçc cao h∆°n).
""", icon="‚ÑπÔ∏è")
st.info("""**Gi·∫£i ph√°p ƒë·ªÅ xu·∫•t cho c√°c tr∆∞·ªùng ƒë·∫°i h·ªçc thu h√∫t ngu·ªìn sinh vi√™n**: Vi·ªác c√°c n·ªÅn t·∫£ng h·ªçc online chi·∫øm ƒëa s·ªë h∆°n v·ªõi ƒë·ªôi ng≈© k·ªπ s∆∞/sinh vi√™n Vi·ªát Nam c√≥ th·ªÉ l√† m·ªôt c∆° h·ªôi cho c√°c tr∆∞·ªùng ƒë·∫°i h·ªçc. C√°c tr∆∞·ªùng c√≥ th·ªÉ t·∫°o ra c√°c kh√≥a h·ªçc online, ƒë·∫∑c bi·ªát l√† c√°c kh√≥a h·ªçc li√™n quan ƒë·∫øn ML/DS ƒë·ªÉ thu h√∫t ƒë∆∞·ª£c nhi·ªÅu sinh vi√™n bi·∫øt ƒë·∫øn tr∆∞·ªùng c·ªßa m√¨nh h∆°n, v·ª´a cung c·∫•p ki·∫øn th·ª©c chuy√™n m√¥n v·ªÅ lƒ©nh v·ª±c ƒë√≥, v·ª´a c√≥ th·ªÉ linh ho·∫°t gi·ªù gi·∫•c c·ªßa ng∆∞·ªùi h·ªçc. Ngo√†i ra, ƒë·ªÉ c√≥ th·ªÉ t·∫°o ƒë∆∞·ª£c ƒë·ªôi ng≈© k·ªπ s∆∞ ch·∫•t l∆∞·ª£ng h∆°n, mang t√≠nh c·∫°nh tranh cao h∆°n th√¨ c√°c tr∆∞·ªùng n√™n ƒë·∫©y m·∫°nh tuy·ªÉn sinh c≈©ng nh∆∞ gi·∫£m h·ªçc ph√≠ ƒë·ªÉ ng∆∞·ªùi h·ªçc c√≥ th·ªÉ ti·∫øp c·∫≠n ƒë∆∞·ª£c ki·∫øn th·ª©c t·ª´ c√°c tr∆∞·ªùng ƒë·∫°i h·ªçc (v·ªõi chi ph√≠ r·∫ª).
""", icon="‚ùì")

st.markdown("---", unsafe_allow_html=True)
st.markdown("#### 2. C√°c ng√¥n ng·ªØ l·∫≠p tr√¨nh n√†o n√†o ƒë∆∞·ª£c c√°c k·ªπ s∆∞ v√† c√°c h·ªçc sinh s·ª≠ d·ª•ng cho ML/DS?")

Languages_employee = df_employee[['Languages']].apply(lambda x: 
                                                            list( map(lambda y:y.strip(),str(x[0]).split('--'))),axis=1)\
                                                    .explode().value_counts().to_frame(name='Employee')
Languages = df_student[['Languages']].apply(lambda x: 
                                            list( map(lambda y:y.strip(),str(x[0]).split('--'))),axis=1)\
                                            .explode().value_counts().to_frame(name='Student')
# --- drop un useful records
for i in Languages_employee.index:
    if i.isnumeric():
        Languages_employee.drop(index = i,inplace=True)
Languages_employee.drop(index = ['-1','nan'],inplace=True)


for i in Languages.index:
    if i.isnumeric():
        Languages.drop(index = i,inplace=True)
        
Languages.drop(index = ['-1','nan'],inplace=True)

# -----

Languages.reset_index(inplace=True)
Languages.rename(columns={'index':'Languages'},inplace=True)

Languages_employee.reset_index(inplace=True)
Languages_employee.rename(columns={'index':'Languages'},inplace=True)
Languages_use= pd.merge(Languages,Languages_employee,how='inner')

Languages_use_percent  = Languages_use
Languages_use_percent[['Student','Employee']] =  Languages_use[['Student','Employee']]/Languages_use[['Student','Employee']].sum()

# -----
plot2 = go.Figure(data=[go.Bar(
    name = 'Student',
    x = Languages_use_percent['Languages'],
    y = Languages_use_percent['Student'],
   ),
                       go.Bar(
    name = 'Employee',
    x = Languages_use_percent['Languages'],
    y = Languages_use_percent['Employee']
   )
])  
plot2.update_layout(
    xaxis_title="Languages", yaxis_title="Percentage"
)               

st.plotly_chart(plot2, use_container_width= True, height = 800)

st.info("""**Nh·∫≠n x√©t:** Kh√¥ng l·∫° khi Python v·∫´n l√† l·ª±a ch·ªçn h√†ng ƒë·∫ßu c·ªßa lƒ©nh v·ª±c n√†y, v√† c≈©ng kh√¥ng c√≥ nhi·ªÅu kh√°c bi·ªát l·ªõn gi·ªØa ng∆∞·ªùi ƒëi l√†m v√† ng∆∞·ªùi ch∆∞a ƒëi l√†m, ngo·∫°i tr·ª´ vi·ªác ng∆∞·ªùi ƒëi l√†m ta th·∫•y nh·ªânh h∆°n v·ªÅ s·ªë l∆∞·ª£ng c√°c ng√¥n ng·ªØ mang chuy√™n t√≠nh chuy√™n m√¥n 'kh√° h∆°n' nh∆∞ R, Bash, SQL, Scala, VBA, ... trong khi nh·ªØng ng∆∞·ªùi ch∆∞a ƒëi l√†m th√¨ c√≥ xu th·∫ø h·ªçc nh·ªØng ng√¥n ng·ªØ mang t√≠nh 'ƒë·ªÅ c·ª≠' cho ng∆∞·ªùi b·∫Øt ƒë·∫ßu h·ªçc nh∆∞ java, C hay C++.
""", icon="‚ÑπÔ∏è")

# -----
st.markdown("---", unsafe_allow_html=True)
st.markdown("#### 3. Vi·ªác ƒëi l√†m s·∫Ω c√≥ nhi·ªÅu kinh nghi·ªám cho vi·ªác nghi√™n c·ª©u h∆°n hay kh√¥ng?")

employee_paper = df_employee['Published Papers'].value_counts().to_frame()
not_employee_paper = df_non_tech['Published Papers'].value_counts().to_frame() - employee_paper

employee_paper.reset_index(inplace=True)
not_employee_paper.reset_index(inplace=True)

st.write(employee_paper)

fig = make_subplots(rows=1,cols=2,
                    specs=[[{"type": "pie"}, {"type": "pie"}]],
                    subplot_titles=("Employee","Unemployment"))
fig.add_trace(go.Pie(
     name='',
     values=employee_paper['count'],
     labels=employee_paper['Published Papers']),
     row=1, col=1)

fig.add_trace(go.Pie(
     name='',
     values=not_employee_paper['count'],
     labels=not_employee_paper['Published Papers']),
    row=1, col=2)

fig.update_layout(height=600, width=1000, title_text="Published Papers")
st.plotly_chart(fig, use_container_width= True, height = 800)

st.info("""**Nh·∫≠n x√©t:** Ta c√≥ th·ªÉ th·∫•y r·∫±ng ng∆∞·ªùi ƒëi l√†m c√≥ xu h∆∞·ªõng c√≥ nhi·ªÅu b√†i b√°o h∆°n so v·ªõi nh·ªØng ng∆∞·ªùi ch∆∞a ƒëi l√†m. ƒêi·ªÅu n√†y c√≥ th·ªÉ l√† do h·ªç c√≥ nhi·ªÅu kinh nghi·ªám h∆°n, ho·∫∑c c√≥ th·ªÉ l√† do h·ªç c√≥ nhi·ªÅu th·ªùi gian h∆°n ƒë·ªÉ nghi√™n c·ª©u. 
Ngo√†i ra, ta c√≥ th·ªÉ th·∫•y ƒë∆∞·ª£c vi·ªác c√≥ b√†o b√°o publish hay kh√¥ng c≈©ng c√≥ m·ªôt ph·∫ßn ·∫£nh h∆∞·ªüng ƒë·∫øn kh·∫£ nƒÉng c√≥ vi·ªác c·ªßa nh·ªØng ng∆∞·ªùi kh·∫£o s√°t khi ƒëa ph·∫ßn nh·ªØng ng∆∞·ªùi ch∆∞a c√≥ vi·ªác c≈©ng ch∆∞a c√≥ b√†i b√°o publish, tuy nhi√™n vi·ªác n√†y th√¨ kh√¥ng mang t√≠nh b·∫Øt bu·ªôc v√¨ khi ta xem nh·ªØng kh·∫£o s√°t th√¨ s·ªë ng∆∞·ªùi c√≥ vi·ªác th√¨ s·ªë l∆∞·ª£ng ng∆∞·ªùi kh√¥ng c√≥ b√†i b√°o publish c≈©ng chi·∫øm h∆°n 50%, tuy r·∫±ng kh√¥ng chi·∫øm ph·∫ßn l·ªõn nh∆∞ nh·ªØng ng∆∞·ªùi ch∆∞a c√≥ vi·ªác.""", icon="‚ÑπÔ∏è")


# -----
st.markdown("---", unsafe_allow_html=True)
st.markdown("#### 4. S·ªë nƒÉm kinh nghi·ªám v·ªÅ vi·ªác code ·∫£nh h∆∞·ªüng t·ªõi m·ª©c l∆∞∆°ng ƒë∆∞·ª£c bi·ªÉu hi·ªán nh∆∞ th·∫ø n√†o?")

# Filter out the value "I have never written code":
df_f4 = df[df['Coding Experience'] != 'I have never written code']
coding_exp_counts = df_f4['Coding Experience'].value_counts()

avg_salary = df_f4.groupby('Coding Experience')['Salary'].mean().sort_values()

fig4 = make_subplots(
    rows=1, cols=2,
    column_widths=[0.5, 0.2],
    row_heights=[2],
    subplot_titles=('Average Salary by Coding Experience', 'Coding Experience Distribution'),
    specs=[[{"type": "bar"}, {"type": "pie"}]])

fig4.add_trace(go.Bar(x=avg_salary.index, y=avg_salary.values, name='avg_salary', marker_color='red'), row=1, col=1)

fig4.add_trace(go.Pie(labels=coding_exp_counts.index, values=coding_exp_counts.values, name='coding_exp'), row=1, col=2)

fig4.update_layout(
    title='Coding Experience and Salary',
    xaxis_title="Experience",
    yaxis_title="salary",
    grid=dict(rows=1, columns=2),
    legend_title="Coding Experience",
    template='plotly_white'
)

st.plotly_chart(fig4, use_container_width= True, height = 800)

st.info("""**Nh·∫≠n x√©t:** 
""", icon="‚ÑπÔ∏è")

# -----
st.markdown("---", unsafe_allow_html=True)
st.markdown("#### 5. ?")

rate_df = df.groupby(['Title', 'Gender']).size() / df.groupby('Title').size() * 100
rate_df = rate_df.reset_index(name='Rate')
rate_df = rate_df.sort_values(by='Rate')

rate_df['Gender'] = rate_df['Gender'].replace(['Nonbinary', 'Prefer to self-describe', 'Prefer not to say'], 'Others')

fig5 = go.Figure()

for gender in rate_df['Gender'].unique():
    fig5.add_trace(
        go.Bar(
            x=rate_df[rate_df['Gender'] == gender]['Title'],
            y=rate_df[rate_df['Gender'] == gender]['Rate'],
            name=gender
        )
    )

fig5.update_layout(
    title={
        'text': 'Gender Rate by Title',
        'x':0.5,
        'y': 0.95
    },
    xaxis_title='Title',
    yaxis_title='Rate (%)',
    template='plotly_white',
    barmode='group',
    legend=dict(
        orientation="h",
        yanchor="middle",
        y=1.05,
        xanchor="center",
        x=0.95
    ),
    bargap=0.2,
    autosize=False,
    width=1800,
    height=600,
    margin=dict(l=50, r=50, t=50, b=50),
    xaxis=dict(type='category'),
    hovermode='x'
)


st.plotly_chart(fig5, use_container_width= True, height = 800)